#!/usr/bin/env bash
# ofx
# v0.2

usage(){ echo '
Usage: ofx <command> <ofx_file>

Commands:
   xml       print ofx data as xml (ofx v2)
   json      print ofx data as json
   csv       print transactions as CSV
   info      print bank, account, and range info
   range     print range of transaction dates
   bank      print name of bank
   bnk       print short name of bank
   account   print account number
'
}

# The following fields are usually available from an OFX file:
# (fields marked with and * are generated by this script, derived from other fields)
#
# .BANKID     The Bank ID -- a nine-digit mysterious mapping of the financial institution.
# .ACCTID     Account number as it appears in the OFX file.
# .ACCTN    * Account number with all non numbers removed, derived from ACCTID.
# .ACCTSFX  * The last 4 digits of the account number, derived from ACCTID.
# .DTSTART    Start date-and-time of included transactions.
# .DSTART   * Start date of included transactions as YYYY-MM-DD, derived from DTSTART.
# .DTEND      End date-and-time of included transactions.
# .DEND     * End date of included transactions as YYYY-MM-DD, derived from DTSTART.
# .INTBID     Intuit's Bank ID, stored in the <INTU.BID> tag.
# .BNS      * Short-form name of Bank, derived from .INTBID and bank list defined below.
# .BNM      * Short-form name of Bank, derived from .INTBID and bank list defined below.
# .BNL      * Long-form name of Bank, derived from .INTBID and bank list defined below.
#
# Additionally, the following fields are usually available for transactions:
#
# .FITID       Transaction ID, unique to each account of a financial institution.
# .DTPOSTED    Date and Time Posted.
# .DPOSTED   * Date in YYYY-MM-DD format, derived from DTPOSTED.
# .TRNTYPE     Transaction type (CREDIT, DEBIT, ATM, etc.)
# .TRNAMT      Positive for credits, negative for debits, no dollar sign.
# .NAME        The first line of the description.
# .MEMO        The second line of the description.
# .DESC      * Description, derived from NAME and MEMO, which, when both are non-empty,
#              are joined by a delimiter defined below. (If either is empty then
#              they are joined without a delimiter.)
_description_deliminator='; '
# _description_deliminator='
# '

# For bank names populate this list with the financial institutions you use.
# INTU.BID is the Inutuit Bank ID; the values for North-American institutions can be found here:
# https://ofx-prod-filist.intuit.com/qm2400/data/fidir.txt
# each line should be tab-separated values for: INTU.BID, short name, medium name, long name
# in any case a bank can't be found on this list, the INTU.BID will be used as the bank name.
INTU_BIDS="
00002	TD	TD Canada Trust	Toronto Dominion Canada Trust
00005	CIBC	CIBC	Canadian Imperial Bank of Commerce
00015	RBC	RBC RoyalBank	Royal Bank of Canada
00024	PC	PC Financial	President's Choice Financial
"


# a NOTE on the naming conventions
#
#   An underscore will be used to prefix names of
#   - variables containing fragments of jq code,
#   - functions that generate fragments of jq code

# PROGRESS NOTES:
#
# this version of the script creates a lot of custom "fields" in jq
# which can be strung together to produce various outputs
# the commands provide various presets
#
# this script preprocesses the OFX file to extract the INTU.BID,
# which is lost when converting the OFX to XML (OFX 2.0)
# it is then injected into the jq script as a variable,
# along with values for the bank name and initials.

# TODO:
# - provide a way to customize output
# - provide the ability to create well-named csv files
# - provide a way to rename ofx files
# - inject INTU.BID into XML by changing <INTU.BID> to <FI><FID>
#   doing it this way will prevent the need to read the file twice,
#   and instead process it as a single strem.

_account_identifier='.BNS + "-" + .ACCTSFX'
_date_range='.DSTART + " to " + .DEND'
_default_info_format="$_account_identifier + \" from \" + $_date_range"
_default_transaction_fields="
	$_account_identifier,
	.FITID,
	.DPOSTED,
	.TRNTYPE,
	.DESC,
	.TRNAMT
"


# this is a global variable containing the path to the OFX file
declare ofx
main(){
	local cmd="${1:-}"; shift
	for ofx in "$@"; do
		[[ -f "$ofx" ]] || { usage >&2; exit 69; }
		[[ -r "$ofx" ]] || { usage >&2; exit 69; }
		case "$cmd" in
		xml) xml;;
		json) json;;
		csv|trans|transactions) csv;;
		range) info "$_date_range";;
		bank) info '.BNM';;
		bnk) info '.BNS';;
		info) info;;
		account) info "$_account_identifier";;
		*) usage >&2; exit 69;;
		esac
	done
}

# Extracts the Intuit Bank ID from the <INTU.BID> SGML tag in the OFX file.
# Note that this tag is removed when the OFX is uplifted to XML
intu_bid(){
	< "$ofx" tr -d $'\n\r\t ' | # remove all whitespace
	grep '<INTU.BID>' | # blank if not found
	sed -E 's/^.*<INTU.BID>([^<]*)<.*$/\1/' # strip everything else
}

# prints an object with bank information, to inject into jq script
_pop_vars(){
	awk -F'\t' -v BID="$(intu_bid)" '
	BEGIN{
		print("{BANKID: $bank_id, ACCTID: $account_number, ACCTN: $account_bare, ACCTSFX: $account_suffix, DTSTART: $datetime_start, DSTART:  $date_start, DTEND: $datetime_end, DEND: $date_end ")
	}
	$1==BID{
		printf(", INTBID: \"%s\", BNS: \"%s\", BNM: \"%s\", BNL: \"%s\"", $1, $2, $3, $4 )
		bank_found=1
		exit
	}
	END{
		if(bank_found==0){
			printf(", INTBID: \"%s\", BNS: \"%s\", BNM: \"%s\", BNL: \"%s\"", BID, BID, BID, BID )
		}
		print "}"
	}' <<<"$INTU_BIDS"
}

xml(){
	P="$PWD"
	cd src/ofx2xml || die "Error: cant enter ofx2xml directory"
	go run ofx2xml.go "$P/$ofx"
	cd "$P" || die die "Error: cant re-enter original working directory"
}

die(){ echo "$@" >&2; exit 1; }

json(){
	xml | xq -j | cat  # `cat` prevents output from being interactive (which causes errors for ofx2xml)
}

ofxq(){
	json | jq -r "$@"
}

# shellcheck disable=SC2016  # dollarsigns are preserved for jq
_to_transcation_list='
	.OFX
	| if has("BANKMSGSRSV1") then .BANKMSGSRSV1.STMTTRNRS
		| if type == "array" then .[0] else . end
		| .STMTRS
	elif has("CREDITCARDMSGSRSV1") then .CREDITCARDMSGSRSV1.CCSTMTTRNRS
		| if type == "array" then .[0] else . end
		| .CCSTMTRS
	else
		error("Unknown OFX type")
	end
	| ((.BANKACCTFROM.BANKID // "")+(.CCACCTFROM.BANKID // "")) as $bank_id
	| ((.BANKACCTFROM.ACCTID // "")+(.CCACCTFROM.ACCTID // "")) as $account_number
	| ( $account_number | gsub("[^A-Za-z0-9]"; "") ) as $account_bare
	| ( $account_bare[-4:] ) as $account_suffix
	| .BANKTRANLIST
	| (.DTSTART // "") as $datetime_start
	| ($datetime_start[0:4]+"-"+$datetime_start[4:6]+"-"+$datetime_start[6:8]) as $date_start
	| (.DTEND // "") as $datetime_end
	| ($datetime_end[0:4]+"-"+$datetime_end[4:6]+"-"+$datetime_end[6:8]) as $date_end
'
info(){ local _format="${1:-$_default_info_format}"
	 ofxq "$_to_transcation_list | . + $(_pop_vars) | $_format"
}

# shellcheck disable=SC2120  # don't be alarmed if the default fields are always used!
csv(){ local _fields="${1:-$_default_transaction_fields}"
	ofxq "$_to_transcation_list"'
	| .STMTTRN | if type == "array" then . else [.] end
	| map ( . +
		{
			DPOSTED: (
				.DTPOSTED[0:4]+"-"+.DTPOSTED[4:6]+"-"+.DTPOSTED[6:8]
			),
			DESC: (
				if ((.NAME//"") != "" and (.MEMO//"") != "")
				then (.NAME//"") + "'"$_description_deliminator"'" + (.MEMO//"")
				else (.NAME//"") + (.MEMO//"")
				end
			),
			TRNAMT: ( # add zeros for cents if missing
				.TRNAMT
				| gsub("^(?<a>-?\\d+)$";"\(.a).00")
				| gsub("^(?<a>-?\\d+\\.\\d)$";"\(.a)0")
			)
		} + '"$(_pop_vars)"' )
	| .[]
	| [ '"$_fields"' ]
	| @csv
	'
}

main "$@"
